---
title: Set-up & deployment
---

This guide will take you through the basic set up and deployment for FlowEHR in your environment.

## Get the repositories

Repositories:
1. [FlowEHR-Data-Pot](https://github.com/UCLH-Foundry/FlowEHR-Data-Pot) - fork or clone this repo. Data source deployments (Example data pipeline) - can use [Satellite](https://github.com/UCLH-Foundry/Satellite) for synthetic EMAP star schema
2. [FlowEHR](https://github.com/UCLH-Foundry/FlowEHR) - this a template repo so you create your own repo from the template and customise it to your institution.
3. [Powershell-Scripts](https://github.com/UCLH-Foundry/Powershell-Scripts) - allows VM Customisations of windows VMs
4. [Model-Seedling](https://github.com/UCLH-Foundry/Model-Seedling) - starting point for a new Data Science project
5. [Dash-Seedling](https://github.com/UCLH-Foundry/Dash-Seedling) - used for creating Dash web apps
6. [AzureTRE-Deployment](https://github.com/microsoft/AzureTRE-Deployment) - FlowEHR Azure TRE deployment, linking the AzureTRE with flowEHR and custom data sources
7. [Azure-Bootstrap](https://github.com/UCLH-Foundry/Azure-Bootstrap) - Utility for bootstrapping common Azure resources needed to store Terraform state, containers and configure build agents, used in CI.

## Core configuration

::: {.panel-tabset}
### Locally

Make sure VS code dev container extension is updated.

Dev subscription access:
- On the azure portal you may not be able to access apps when you sign in via your NHS account. However, if you click on your username in the top right and go to switch directory then you can switch to your institution's subscription e.g. UCLH DIF in the directories and subscription page.
- For local deployments, use the sub-uclhdif-sandbox subscription.

Policies and Reading:
- read [Book-of-FlowEHR policies](https://github.com/UCLH-Foundry/Book-of-FlowEHR/tree/the-walking-skeleton/policies)
    - in particular [resource naming](https://github.com/UCLH-Foundry/Book-of-FlowEHR/blob/the-walking-skeleton/policies/resource-naming.md) to get an idea of resource naming conventions

1. [FlowEHR-Data-Sources](https://github.com/UCLH-Foundry/FlowEHR-Data-Sources):
    - Connects to [Satellite](https://github.com/UCLH-Foundry/Satellite) (with synthetic/fake data using EMAP star schema) or real EMAP data.
    - `make deploy` basically does a `terragrunt run-all apply` (terragrunt is a thin wrapper around Terraform that provides extra tools for keeping Terraform configurations DRY - Don't Repeat Yourself)
    - Understand descriptions of each of the TF_VAR_... envs are in variables.tf
    - Take note of [address-spaces](https://github.com/UCLH-Foundry/Book-of-FlowEHR/blob/the-walking-skeleton/milestones/walking-skeleton/scaffolding/address-spaces.md) when allocating address spaces - see available addresses. Will need to find address space by the using the [cidr converter](https://www.ipaddressguide.com/cidr) to list addresses within the IP range i.e. the available addresses. 
    - Look at terraform variable `informdb_pat` - where do you get it? It's a personal access token that can clone the private repo [Inform-DB](https://github.com/inform-health-informatics/Inform-DB/) which defines the EMAP star schema.
    [Satellite](https://github.com/UCLH-Foundry/Satellite) is a Python package for creating and populating an EMAP star schema with completely synthetic/fake data.

2. [UCLH-FlowEHR](https://github.com/UCLH-Foundry/UCLH-FlowEHR):
    - Uses [FlowEHR-Data-Sources](https://github.com/UCLH-Foundry/FlowEHR-Data-Sources) and the [FlowEHR-Data-Forge](https://github.com/UCLH-Foundry/FlowEHR-Data-Forge.git) which coverts e.g. NHS data into usable patient related features using Azure Databricks
    - set the `core_address_space` according to the [book of flowEHR address spaces](https://github.com/UCLH-Foundry/Book-of-FlowEHR/blob/the-walking-skeleton/milestones/walking-skeleton/scaffolding/address-spaces.md) - should be different from data-sources address
    - make sure to comment out `private_dns_zones_rg` and set `accesses_real_data` to false (since we are using synthetic/fake data)
    - Use the output from flowEHR data sources to create a data source in `data_source_connections` i.e. refer to the resource group created in the previous data sources step
        - In the Azure portal, look at the keyvault that was created by the flowEHR data sources for the `database`, `username` (consumer username) and `password` (consumer password)
        - If terraform hasn't provided access then find out your [ip address](https://whatismyipaddress.com/) and add it to the IP addresses allowed in the networking section
    - For the transform section, have a single repository that points to `https://github.com/UCLH-Foundry/FlowEHR-Data-Forge.git`
    - The `sha` can be found in the `config.yaml` file
    - For the serve block, use the existing application in UCLH-FlowEHR-TestBed:
  ```
      github_owner: UCLH-FlowEHR-TestBed
      github_app_id: 309047
      github_app_installation_id: 35581991
  ```
    - for monitoring you can add your nhs email to the `alert_recipients` and updated the `_location` in the `network_watcher` name to be `_uksouth`

### CI/CD

CI/CD instructions
:::

## Infrastructure deployment

::: {.panel-tabset}
### Locally


Before running the Makefiles in each repo:
- `az login --tenant <Tenant ID>` which you can [find](https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/how-to-find-tenant) on the Azure Portal
- `az account set --subscription <Subscription Name>`
- `az account show` to check in correct subscription

1. [FlowEHR-Data-Sources](https://github.com/UCLH-Foundry/FlowEHR-Data-Sources):
- `make deploy` - keep note of the printing of connection details for use later 
- One resource group is created in this step.
- Error fixes:
    - A common error is "ERROR: deleting subnet..." which seems to occur because a subnet already exists that is using the same address space so shouldn't be deleted. Therefore, change the address space

2. [UCLH-FlowEHR](https://github.com/UCLH-Foundry/UCLH-FlowEHR):
- `make all` - To deploy all infrastructure, and any configured pipelines and apps
- `make infrastructure` - Alternatively, if you just want to deploy the infrastructure
- Two resource groups are created in this step.
- Error fixes:
  - Re-run `make all`
  - Manually delete resource group on Azure Portal
    - In keyvaults - manage deleted keys and purge keyvault
    - [ ] `make clean` should be updated (delete .tfstate terraform)
    - Re-run `make all` fresh


### CI/CD

CI/CD instructions
:::


## Setting up App & Model Serving

Now we have our core infrastructure deployed, we can proceed to set up the app serving layer so it's ready to deploy and host our [FlowEHR Apps](../anatomy/apps.qmd).


### Configure a GitHub App

For FlowEHR to create and manage repositories in GitHub for hosting FlowEHR App code, it requires a [GitHub App](https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/about-apps) to authenticate.

We recommend creating a new [GitHub Organization](https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations) for containing all of the FlowEHR App repositories that will be created and managed by your FlowEHR instance - just so you're not providing unnecessary management access to any other repositories you might have in your main org.


#### Create GH app

Once you have the organisation you wish to use at the ready, follow [these instructions](https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/creating-a-github-app) to create a new GitHub App within the organisation you wish to host your new FlowEHR apps, with the following properties (leave everything else blank/default):

```yaml
Name: {YOUR_ORG}-FlowEHR # or something similar (needs to be globally unique)
Homepage URL: https://flowehr.io
Webhook: uncheck
Permissions:
    Repository Permissions:
        - Actions: Read-only
        - Administration: Read and write
        - Contents: Read and write
        - Environments: Read and write
        - Metadata: Read-only
        - Secrets: Read and write
        - Variables: Read and write
        - Workflows: Read and write
    Organization Permissions:
        - Administration: Read and write
        - Members: Read and write
Where can this GitHub App be installed?: Only on this account
```

![](./assets/github-app-permissions.png){fig-alt="Configure GitHub App permissions"}

When happy, click `Create GitHub App`. After creation, in your app's settings page, note down the `App Id`.


#### Generate Private Key

In the app settings page, scroll down to near the bottom and find the `Private Keys` section. Click `Generate a private key`. This will download a PEM cert file to your machine. We'll need this later.

![](./assets/create-private-key.png){fig-alt="Create a private key"}


#### Install GH app

Once created, you need to the install the app to the organisation. [Follow these instructions](https://docs.github.com/en/apps/maintaining-github-apps/installing-github-apps), selecting your organization and choosing `All repositories`.

After installation, stay on the same page and check the URL. It should look like this:

> https://github.com/organizations/UCLH-FlowEHR-TestBed/settings/installations/35581991

At the end of the URL after `installations/`, you'll see a number (`35581991` in the example above). Record this down - it is your `GitHub App Installation Id`. (Believe it or not this is the easiest way to find it!)

![](./assets/find-installation-id.png){fig-alt="Find your Installation Id"}


#### Update config

Depending on whether you're configuring this for a local dev deployment, or for CI (or both if you'd like local developers and your testing environments to share a single Organization for test apps) - update the relevant `config.yaml` or `config.{ENVIRONMENT}.yaml` with the GitHub app details in the `serve` block:

```yaml
serve:
    github_owner: name of the GitHub Organisation you created/wish to use for deploying apps into
    github_app_id: your GitHub App's "App Id" from earlier
    github_app_installation_id: your GitHub App's "Installation Id" from earlier
```


#### Store the cert

::: {.panel-tabset}
### Locally

For developing locally, simply find the PEM file you downloaded earlier, rename it to `github.pem` and drag it into this repo under the `/apps` directory. It will be picked up by Terraform during deployment, and is gitignored so won't be checked in accidentally.

:::{.callout-note}
For other developers who want to use this same app instead of setting up their own, direct them to create and download their own private key from the GitHub App's settings page as you did in a previous step.
:::

### CI/CD

For use in CI, copy the contents of the PEM file, and paste it into a new GitHub secret called `GH_APP_CERT`. The CI/CD pipeline will read this into a file to use during deployments.
:::

That's it for now! We'll need all this when we come to deploying apps (which we'll cover in the [deployment](./60_deployment.qmd) section).
