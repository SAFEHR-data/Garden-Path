---
title: Virtual Machines
author: 
    - Ahmed Al-Hindawi
    - Tom Frost
    - David Ramlakhan
date: 2023-07-28
---

As a user of FlowEHR you will need to create a virtual machine (VM)
within an Azure Workspace in order to access FlowEHR assets within a
secure Trusted Research Environment (TRE). The following instructions
describe the process of VM creation and access, as well as some initial
setup to access a Jupyter notebook once inside the VM.

This documentation relies heavily upon the official [AzureTRE
docs](https://microsoft.github.io/AzureTRE/latest/tre-templates/shared-services/nexus/)
which should be consulted before performing the below steps.

## Creating a new VM

1. Visit the FlowEHR Azure TRE landing page URL (please request from a
    member of the team)
2. Select an appropriate Workspace from the list provided
3. Under `Workspace Services`, select the `VMs` option
4. Under `Resources`, you will see any previously created VMs. If there
    are none, select `Create New` in the upper right
5. Click 'Create' on either the 'Windows Virtual Machine' or the 'Linux Virtual Machine'
6. Choose an approriate name and description for the VM and select the
    desired image. 
    - For the Windows Virtual Machine, choose the 'Windows 11 DSVM RPython' image, as this is actively maintained
7. Select an approriate VM size from the dropdown menu. If youâ€™re not
    sure of your requirements, opt for the `2 CPU | 8GB RAM` option. You
    can scale this up later if needed.
8. Check the box marked `Shared storage` to enable access to workspace
    shared storage.
9. Hit `Submit`. Your VM will start provisioning and you may need to
    wait a few minutes.

## Stopping a running VM

1. Select the three dots at the upper right of the VM entry under
    `Resources`
2. Select `Action > Stop`
3. The VM will be stopped momentarily

## Starting a stopped VM

1. Select the three dots at the upper right of the VM entry under
    `Resources`
2. Select `Action > Start`

## Connecting to a created VM

1. Visit the FlowEHR Azure TRE landing page URL
2. Select an appropriate Workspace from the list provided
3. Under `Workspace Services`, select the `VMs` option
4. Under `Resources`, you will see any previously created VMs
5. Select `Connect` under the VM you wish to connect to. This launches
    a separate browser window or tab.

## Deleting a VM

1. Select the three dots at the upper right of the VM entry under
    `Resources`
2. Select `Action > Disable`
3. When the VM has been disabled, repeat step 1. and select `Action > Delete`

## Installing software within the VM

As the VM is located within a TRE, most outbound internet access is
restricted.

### GitHub

Access to repositories hosted on then internet, such as https://github.com/, is restricted. Repositories can be mirrored a TRE-accessible Gitea Shared Service. If you need to have any repositories mirrored in the Gitea Shared Service, then please ask your TRE Administrator to create the mirror. 

Note that mirrors on the Gitea Shared Service are read-only copies of the 
source Github repository: the mirror will periodically pull updates from the source mirror, but
you will not be able to push changes back to either the Gitea instance or to Github. 

The TRE Workspaces also provides an option to use read-write Gitea repos. This will allow for the
use of Gitea repositories that can be shared with colleagues within the same TRE workspace. These repositories are read/write from within the TRE Workspace, but there is no direct connection to synchronise these repositories with internet sources. However, if needed, the Airlock facility can be used to transfer data from the Workspace Gitea repo to an 
internet-accessible location. 

### APT packages

Workspace Linux VMs are preconfigured to use the [Nexus](https://microsoft.github.io/AzureTRE/latest/tre-templates/shared-services/nexus/)
mirror. You can use `sudo apt` and its variants to update repository info, and install new 
packages to your VM. 

### Python packages via Conda and PyPI

The Nexus mirror provides mirrored access to packages available via
conda forge and PyPI via the standard `pip install` and `conda install`
command line interfaces.
